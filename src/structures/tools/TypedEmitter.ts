/**
 * @author SNIPPIK
 * @description –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–∏—é type
 * @type ListenerSignature
 * @public
 */
export type ListenerSignature<L> = {
    [E in keyof L]: L[E] extends (...args: any[]) => any ? L[E] : (...args: any[]) => void;
};

/**
 * @author SNIPPIK
 * @description –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @type DefaultListener
 * @public
 */
export type DefaultListener = (...args: any[]) => void | Promise<void>;

/**
 * @author SNIPPIK
 * @description –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è on –∏ once
 * @interface EventBucket
 * @private
 */
interface EventBucket {
    listener: DefaultListener;
    type: "on" | "once"
}

/**
 * @author SNIPPIK
 * @description –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π EventEmitter –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ Map
 * @template L - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–±—ã—Ç–∏–π –∏ –∏—Ö —Ç–∏–ø–æ–≤ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
 * @class TypedEmitter
 * @public
 *
 * @usage –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –≤ —Å–æ–±—ã—Ç–∏—è—Ö once –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async!
 */
export class TypedEmitter<L extends Record<string, any>> {
    /**
     * @description –õ–æ–∫–∞–ª—å–Ω–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, —Ñ—É–Ω–∫—Ü–∏–π –≤ map
     * @private
     */
    private _set = new Map<string, EventBucket[]>();

    /**
     * @description –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º
     * @param event - –ò–º—è —Å–æ–±—ã—Ç–∏—è
     * @param listener - –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     * @returns this
     * @public
     */
    public on<E extends keyof ListenerSignature<L>>(event: E, listener: ListenerSignature<L>[E]): this;
    public on<S extends string>(event: Exclude<S, keyof ListenerSignature<L>>, listener: DefaultListener): this;
    public on(event: string, listener: (...args: any[]) => any): this {
        const arr = this._set.get(event) ?? [];
        arr.push({ listener, type: "on" });
        this._set.set(event, arr);
        return this;
    };

    /**
     * @description –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–¥–∏–Ω —Ä–∞–∑ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º
     * @param event - –ò–º—è —Å–æ–±—ã—Ç–∏—è
     * @param listener - –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     * @returns this
     * @public
     */
    public once<E extends keyof ListenerSignature<L>>(event: E, listener: ListenerSignature<L>[E]): this;
    public once<S extends string>(event: Exclude<S, keyof ListenerSignature<L>>, listener: DefaultListener): this;
    public once(event: string, listener: (...args: any[]) => any): this {
        const arr = this._set.get(event) ?? [];
        arr.push({ listener, type: "once" });
        this._set.set(event, arr);
        return this;
    };

    /**
     * @description –í—ã–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     * @param event - –ò–º—è —Å–æ–±—ã—Ç–∏—è
     * @param args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     * @returns true –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º, –∏–Ω–∞—á–µ false
     * @public
     */
    public emit<E extends keyof ListenerSignature<L>>(event: E, ...args: Parameters<ListenerSignature<L>[E]>): boolean;
    public emit<S extends string>(event: Exclude<S, keyof ListenerSignature<L>>, ...args: any[]): boolean;
    public emit(event: string, ...args: any[]): boolean {
        const arr = this._set?.get(event);
        if (!arr?.length) return false;

        for (const run of arr) {
            const res = run.listener(...args);

            // üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π emit
            if (res instanceof Promise) {
                res.catch(err => {
                    // –ß—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –Ω–µ "–ø–∞–¥–∞–ª–∏" –≤ unhandledRejection
                    setImmediate(() => { throw err; });
                }).finally(() => {
                    // –ï—Å–ª–∏ —Ä–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                    if (run.type === "once") this.off(event, run.listener as any);
                });
            } else {
                // –ï—Å–ª–∏ —Ä–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                if (run.type === "once") this.off(event, run.listener as any);
            }
        }
        return true;
    };

    /**
     * @description –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
     * @param event - –ò–º—è —Å–æ–±—ã—Ç–∏—è
     * @param listener - –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     * @returns this
     * @public
     */
    public off<E extends keyof ListenerSignature<L>>(event: E, listener: ListenerSignature<L>[E]): this;
    public off<S extends string>(event: Exclude<S, keyof ListenerSignature<L>>, listener: DefaultListener): this;
    public off(event: string, listener: (...args: any[]) => any): this {
        const arr = this._set?.get(event);
        if (!arr) return this;
        this._set.set(event, arr.filter(x => x.listener !== listener));
        return this;
    };

    /**
     * @description –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è off ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è
     * @param event - –ò–º—è —Å–æ–±—ã—Ç–∏—è
     * @param listener - –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     * @returns this
     * @public
     */
    public removeListener<E extends keyof ListenerSignature<L>>(event: E, listener: ListenerSignature<L>[E]): this;
    public removeListener<S extends string>(event: Exclude<S, keyof ListenerSignature<L>>, listener: DefaultListener): this;
    public removeListener(event: string, listener: (...args: any[]) => any): this {
        this._set.delete(event);

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if (listener) listener();
        return this;
    };

    /**
     * @description –í—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è
     * @param event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @public
     */
    public listeners<E extends keyof ListenerSignature<E>>(event: string) {
        return (this._set.get(event) ?? []).map(l => l.listener);
    };

    /**
     * @description –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
     * @public
     */
    public removeAllListeners = () => {
        this._set.clear();
        return this;
    };

    /**
     * @description –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ TypedEmitter
     * @public
     */
    public destroy(): void {
        this.removeAllListeners();
        this._set = null;
    };
}