import { Component, DeclareComponent } from "#handler/components";
import { Middlewares } from "#handler/commands";
import { Colors } from "#structures/discord";
import { locale, Logger } from "#structures";
import { db } from "#app/db";

/**
 * @description –ö–Ω–æ–ø–∫–∞ queue, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
 * @class ButtonQueue
 * @extends Component
 * @loadeble
 */
@DeclareComponent({
    name: "queue"
})
@Middlewares(["queue", "another_voice", "voice"])
class ButtonQueue extends Component<"button"> {
    public callback: Component<"button">["callback"] = async (ctx) => {
        const lang = ctx.locale;
        const queue = db.queues.get(ctx.guildId);
        const pageSize = 5;

        // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Å 1)
        let page = Math.floor(queue.tracks.position / pageSize);
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–º–∏–Ω–∏–º—É–º 1)
        const pages = Math.max(1, Math.ceil(queue.tracks.total / pageSize));

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ 2 –≤–µ—Ä—Å–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const getContainer = (position: number) => {
            const components = [];

            // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–µ–∫–∏ –≤ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å!
            for (const track of queue.tracks.array(5, position * 5)) {
                components.push(
                    {
                        "type": 9,
                        "components": [
                            {
                                "type": 10,
                                "content": `### ${db.images.disk_emoji} **[${track.artist.title}](${track.artist.url})**`
                            },
                            {
                                "type": 10,
                                "content": `### **[${track.name}](${track.url})**\n-# ${track.time.split} - ${track.api.name.toLowerCase()}`
                            }
                        ],
                        "accessory": {
                            "type": 11,
                            "media": {
                                "url": track.image.url
                            }
                        }
                    },
                    {
                        "type": 14, // Separator
                        "divider": true,
                        "spacing": 1
                    },
                );
            }

            return [
                {
                    "type": 17, // Container
                    "accent_color": Colors.White,
                    "components": [
                        {
                            "type": 12, // Media
                            items: [
                                {
                                    "media": {
                                        "url": db.images.banner
                                    }
                                }
                            ]
                        },

                        {
                            "type": 10, // Text
                            "content": `# ${locale._(lang, "queue")} - ${ctx.guild.name}`
                        },
                        ...components,
                        {
                            "type": 10, // Text
                            "content": `-# <t:${queue.timestamp}>`
                        },
                        {
                            "type": 10, // Text
                            "content": locale._(lang, "player.button.queue.footer", [queue.tracks.track.user.username, page + 1, pages, queue.tracks.total, queue.tracks.time])
                        },

                        // –ö–Ω–æ–ø–∫–∏
                        {
                            type: 1,
                            components: [
                                {
                                    type: 2,
                                    style: 2,
                                    emoji: {
                                        name: "‚¨Ö"
                                    },
                                    custom_id: "menu_back",
                                },
                                {
                                    type: 2,
                                    style: 4,
                                    emoji: {
                                        name: "üóëÔ∏è"
                                    },
                                    custom_id: "menu_cancel"
                                },
                                {
                                    type: 2,
                                    style: 2,
                                    emoji: {
                                        name: "‚û°"
                                    },
                                    custom_id: "menu_next"
                                }
                            ]
                        },
                    ]
                }
            ];
        };

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const msg = await ctx.reply({flags: "IsComponentsV2", components: getContainer(0), withResponse: true});
            const resource = msg?.resource?.message;

            // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
            if (!resource) return;

            // –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
            const collector = resource.createMessageComponentCollector({
                time: 60e3, componentType: 2,
                filter: (click) => click.user.id !== msg.client.user.id
            });

            // –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            collector.on("collect", (i) => {
                // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if (i.customId === "menu_back") {
                    // –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (page === 0) page = pages - 1;
                    else if (pages === 1) return null;
                    else page--;
                }

                // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                else if (i.customId === "menu_next") {
                    // –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if (page >= pages) page = 0;
                    else if (pages === 1) return null;
                    else page++;
                }

                // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
                else if (i.customId === "menu_cancel") {
                    try {
                        return resource.delete();
                    } catch {
                        return null;
                    }
                }

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                return resource.edit({components: getContainer(page)});
            });

            // –¢–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            setTimeout(() => resource.deletable ? resource.delete().catch(() => null) : null, 60e3);
        } catch (error) {
            Logger.log("ERROR", `[Failed send message/queue]: ${error}`);
        }
    }
}

/**
 * @export default
 * @description –ù–µ –¥–∞–µ–º –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞–º –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–µ–∑–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
export default [ButtonQueue];