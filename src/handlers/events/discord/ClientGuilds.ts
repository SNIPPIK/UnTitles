import { ChannelType, Events, PermissionsBitField, TextChannel } from "discord.js";
import { Assign, Logger } from "#structures";
import { Event } from "#handler/events";
import { homepage } from "package.json";
import { db } from "#app/db";

// –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
const REQUIRED_PERMISSIONS = [
    PermissionsBitField.Flags.SendMessages,       // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    PermissionsBitField.Flags.EmbedLinks,         // –í—Å—Ç–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫/–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    PermissionsBitField.Flags.ViewChannel
];

/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å —Å–æ–±—ã—Ç–∏—è GuildCreate
 * @class GuildCreate
 * @extends Assign
 * @event Events.GuildCreate
 * @public
 *
 * @license BSD-3-Clause + custom restriction | –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞—â–∏—â–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!!!
 */
class GuildCreate extends Assign<Event<Events.GuildCreate>> {
    public constructor() {
        super({
            name: Events.GuildCreate,
            type: "client",
            once: false,
            execute: (guild) => {
                const id = guild.client.shard?.ids[0] ?? 0;
                Logger.log("LOG", `[Core/${id}] has ${Logger.color(32, `added a new guild ${guild.id}`)}`);

                const channel = guild.channels.cache.find((ch): ch is TextChannel => {
                    if (ch.type !== ChannelType.GuildText) return false;

                    const perms = ch.permissionsFor(guild.members.me!);
                    if (!perms) return false;

                    return REQUIRED_PERMISSIONS.every(p => perms.has(p));
                });

                // –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
                if (!channel) return null;

                try {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å–µ—Ä–≤–µ—Ä–∞
                    return channel.send({
                        flags: "IsComponentsV2",
                        components: [
                            {
                                "type": 17, // Container
                                "components": [
                                    {
                                        "type": 12, // Media
                                        items: [
                                            {
                                                "media": {
                                                    "url": db.images.banner
                                                }
                                            }
                                        ]
                                    },

                                    {
                                        "type": 10, // Text
                                        "content": `# üí´ For users Guild ||${guild}|| \n` +
                                            `üëã Hi listeners, thanks for adding the bot to your server, if it wasn't you, another user with privilege could have done it\n` +
                                            `## üîä Voice Engine [without lavalink]\n` +
                                            ` - üéß Full **Voice Gateway v8** implementation\n` +
                                            ` - üîê Full **SRTP + E2EE** support\n` +
                                            ` - üé∂ Best open-source audio player alternative\n` +
                                            ` - üì¶ Adaptive audio packet system with custom \`Jitter Buffer\`\n` +
                                            ` - üîÅ Supported: Autoplay, Repeat, Shuffle, Replay, and more\n` +
                                            `## üéµ Audio\n` +
                                            ` - üîÑ Reuse audio <8 minutes without conversion\n` +
                                            ` - üé∂ Smooth **fade-in/fade-out**, skip, seek & tp transitions\n` +
                                            ` - üîÄ \`Hot audio swap\` between tracks\n` +
                                            ` - üéö 16+ built-in filters + custom filter support\n` +
                                            ` - üì∫ Long video support & raw Live video\n` +
                                            ` - ‚è± Explicit audio stream synchronization without filters\n` +
                                            `## üåê Platforms\n` +
                                            ` - üåç Supported: ${db.api.platforms.array.map((api) => db.api.platforms.authorization.includes(api.name) || db.api.platforms.block.includes(api.name) ? `\`${api.name}\`` : `~~${api.name}~~`)}\n` +
                                            ` - üéµ Audio: ${db.api.platforms.audio.map((api) => `\`${api}\``)}\n` +
                                            ` - üîç Precise search by time, name syllables, and related tracks`
                                    },
                                    {
                                        "type": 14, // Separator
                                        "divider": true,
                                        "spacing": 1
                                    },
                                    {
                                        "type": 10, // Text
                                        "content": `## üìë Support\n`+
                                            `- üì£ If you find a mistake or have any ideas, please post them on github, discord`
                                    }
                                ]
                            },
                            {
                                type: 1,
                                components: [
                                    // Help Guild
                                    {
                                        type: 2,
                                        style: 5,
                                        url: "https://discord.gg/qMf2Sv3",
                                        emoji: { name: "üì®" },
                                        label: "Official server"
                                    },

                                    // Github
                                    {
                                        type: 2,
                                        style: 5,
                                        url: homepage as string,
                                        emoji: { name: "üîó" },
                                        label: "Github"
                                    }
                                ]
                            }
                        ]
                    })
                } catch (err) {
                    console.log(err);
                    return null;
                }
            }
        });
    };
}


/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å —Å–æ–±—ã—Ç–∏—è GuildDelete
 * @class GuildDelete
 * @extends Assign
 * @event Events.GuildDelete
 * @public
 */
class GuildRemove extends Assign<Event<Events.GuildDelete>> {
    public constructor() {
        super({
            name: Events.GuildDelete,
            type: "client",
            once: false,
            execute: async (guild) => {
                const id = guild.client.shard?.ids[0] ?? 0;
                Logger.log("LOG", `[Core/${id}] has ${Logger.color(31, `remove a guild ${guild.id}`)}`);

                // –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                const queue = db.queues.get(guild.id);

                // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å
                if (queue) db.queues.remove(guild.id);
            }
        });
    };
}

/**
 * @export default
 * @description –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
 */
export default [GuildCreate, GuildRemove];