import {Colors} from "discord.js";
import {locale} from "@service/locale";
import {Track} from "@service/player";
import {Event} from "@handler/events";
import {Assign} from "@utils";
import {db} from "@app/db";

/**
 * @author SNIPPIK
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @class message_error
 * @event message/error
 * @public
 */
class message_error extends Assign<Event<"message/error">> {
    public constructor() {
        super({
            name: "message/error",
            type: "player",
            once: false,
            execute: async (queue, error, position) => {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –∏–ª–∏ —Ç—Ä–µ–∫–∞?!
                if (!queue || !queue?.tracks || !queue?.tracks!.track) return null;

                // –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞
                const {api, artist, image, user, name} = position ? queue.tracks.get(position) : queue.tracks.track;
                const message = await queue.message.send({
                    embeds: [{
                        color: api.color, thumbnail: image, timestamp: new Date(),
                        fields: [
                            {
                                name: locale._(queue.message.locale, "player.current.playing"),
                                value: `\`\`\`${name}\`\`\``
                            },
                            {
                                name: locale._(queue.message.locale, "player.current.error"),
                                value: `\`\`\`js\n${error}...\`\`\``
                            }
                        ],
                        author: {name: artist.title, url: artist.url, iconURL: artist.image.url},
                        footer: {
                            text: `${user.username} | ${queue.tracks.time} | üé∂: ${queue.tracks.size}`,
                            iconURL: user?.avatar
                        }
                    }],
                    withResponse: true
                });

                if (message) setTimeout(() => message.delete().catch(() => {}), 20e3);
            }
        });
    }
}

/**
 * @author SNIPPIK
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–µ
 * @class message_push
 * @event message/push
 * @public
 */
class message_push extends Assign<Event<"message/push">> {
    public constructor() {
        super({
            name: "message/push",
            type: "player",
            once: false,
            execute: async (message, obj) => {
                const {artist, image } = obj;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ —Ç–æ–º —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                const msg = await message.channel.send({
                    embeds: [{
                        color: obj["api"] ? obj["api"]["color"] : Colors.Blue,
                        thumbnail: typeof image === "string" ? {url: image} : image ?? {url: db.images.no_image},
                        footer: {
                            icon_url: message.member.avatarURL(),
                            text: `${message.member.displayName}`
                        },
                        author: {
                            name: artist?.title,
                            url: artist?.url,
                            icon_url: db.images.disk
                        },
                        fields: [
                            {
                                name: locale._(message.locale, "player.queue.push"),
                                value: obj instanceof Track ?
                                    // –ï—Å–ª–∏ –æ–¥–∏–Ω —Ç—Ä–µ–∫ –≤ —Å–ø–∏—Å–∫–µ
                                    `\`\`\`[${obj.time.split}] - ${obj.name}\`\`\`` :

                                    // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ (–∞–ª—å–±–æ–º –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç)
                                    `${obj.items.slice(0, 5).map((track, index) => {
                                        return `\`${index + 1}\` ${track.name_replace}`;
                                    }).join("\n")}${obj.items.length > 5 ? locale._(message.locale, "player.queue.push.more", [obj.items.length - 5]) : ""}
                                    `
                            }
                        ]
                    }]
                });

                if (msg) setTimeout(() => msg.delete().catch(() => {}), 12e3);
            }
        });
    };
}

/**
 * @author SNIPPIK
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç
 * @class message_playing
 * @event message/playing
 * @public
 */
class message_playing extends Assign<Event<"message/playing">> {
    public constructor() {
        super({
            name: "message/playing",
            type: "player",
            once: false,
            execute: async (queue) => {
                const message = await queue.message.send({embeds: [queue.componentEmbed], components: queue.components, withResponse: true});

                if (message) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if (!db.queues.cycles.messages.has(message)) {
                        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        db.queues.cycles.messages.add(message);
                    }
                }
            }
        });
    };
}

/**
 * @export default
 * @description –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
 */
export default [message_playing, message_push, message_error];