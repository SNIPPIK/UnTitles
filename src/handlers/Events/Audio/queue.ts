import {ActionRowBuilder, Colors, StringSelectMenuBuilder} from "discord.js";
import {API, Constructor, Handler} from "@handler";
import {Song} from "@lib/player/queue";
import {db} from "@lib/db";

/**
 * @author SNIPPIK
 * @class onError
 * @event message/error
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
class onError extends Constructor.Assign<Handler.Event<"message/error">> {
    public constructor() {
        super({
            name: "message/error",
            type: "player",
            execute: (queue, error) => {
                const {color, author, image, title, requester} = queue.songs.last;
                new queue.message.builder().addEmbeds([
                    {
                        color, thumbnail: image, timestamp: new Date(),
                        fields: [
                            {
                                name: `–©–∞—Å –∏–≥—Ä–∞–µ—Ç;`,
                                value: `\`\`\`${title}\`\`\``
                            },
                            {
                                name: `**Error:**`,
                                value: `\`\`\`js\n${error}...\`\`\``
                            }
                        ],
                        author: {name: author.title, url: author.url, iconURL: db.emojis.diskImage},
                        footer: {
                            text: `${requester.username} | ${queue.songs.time()} | üé∂: ${queue.songs.size}`,
                            iconURL: requester?.avatar
                        }
                    }
                ]).setTime(10e3).send = queue.message;
            }
        });
    }
}

/**
 * @author SNIPPIK
 * @class onPush
 * @event message/push
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–µ
 */
class onPush extends Constructor.Assign<Handler.Event<"message/push">> {
    public constructor() {
        super({
            name: "message/push",
            type: "player",
            execute: (message, obj) => {
                const {author, image} = obj;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ —Ç–æ–º —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                new message.builder().addEmbeds([
                    {
                        color: obj["color"] ?? Colors.Blue,
                        thumbnail: typeof image === "string" ? {url: image} : image ?? {url: db.emojis.noImage},
                        footer: {
                            text: `${message.author.username}`,
                            iconURL: message.author.displayAvatarURL({})
                        },
                        author: {
                            name: author?.title,
                            url: author?.url,
                            iconURL: db.emojis.diskImage
                        },
                        fields: [
                            {
                                name: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:",
                                value: obj instanceof Song ? `\`\`\`${obj.title}\`\`\`\ ` : `\`\`\`${obj.items.slice(1, 5).map((track, index) => {
                                    return `\`${index + 2}\` ${track.titleReplaced}`;
                                }).toString()}\nAnd ${obj.items.length - 5} tracks...\`\`\``
                            }
                        ]
                    }
                ]).setTime(12e3).send = message;
            }
        });
    };
}

/**
 * @author SNIPPIK
 * @class onSearch
 * @event message/search
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–µ–∫–∞
 */
class onSearch extends Constructor.Assign<Handler.Event<"message/search">> {
    public constructor() {
        super({
            name: "message/search",
            type: "player",
            execute: (tracks, platform, message) => {
                if (tracks?.length < 1 || !tracks) {
                    message.send({
                        embeds: [
                            {
                                description: "–ù–µ —É–¥–∞–ª–æ—Å—å —á—Ç–æ —Ç–æ –Ω–∞–π—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!",
                                color: Colors.DarkRed
                            }
                        ]
                    });
                    return;
                }

                new message.builder().addEmbeds([{description: "–í—Å–µ —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏!"}]).setTime(30e3)
                    .addComponents([new ActionRowBuilder().addComponents(new StringSelectMenuBuilder().setCustomId("menu-builder")
                        .setOptions(...tracks.map((track) => {
                                return {
                                    label: `${track.title}`,
                                    description: `${track.author.title} | ${track.duration.full}`,
                                    value: track.url
                                }
                            }), {label: "–û—Ç–º–µ–Ω–∞", value: "stop"}
                        )
                    )]).setPromise((msg) => {
                        //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
                        const collector = msg.createMessageComponentCollector({
                            filter: (interaction) => !interaction.user.bot,
                            time: 30e3,
                            max: 1
                        });

                        //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞
                        collector.once("collect", (interaction: any) => {
                            const id = interaction.values[0];

                            if (id && id !== "stop") db.audio.queue.events.emit("request/api", message, [platform, id])

                            interaction?.deferReply();
                            interaction?.deleteReply();

                            //–£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            msg.delete = 200;
                            collector.stop();
                        });
                    }).send = message;
            }
        });
    };
}

/**
 * @author SNIPPIK
 * @class onPlaying
 * @event message/playing
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç
 */
class onPlaying extends Constructor.Assign<Handler.Event<"message/playing">> {
    public constructor() {
        super({
            name: "message/playing",
            type: "player",
            execute: (queue, message) => {
                const {color, author, image, title, url, duration, requester, platform} = queue.songs.song;
                const embed = new queue.message.builder().addEmbeds([
                    {
                        color, thumbnail: image,
                        author: {name: author.title, url: author.url, iconURL: db.emojis.diskImage},
                        fields: [
                            {
                                name: "–©–∞—Å –∏–≥—Ä–∞–µ—Ç",
                                value: `\`\`\`${title}\`\`\``
                            },

                            //–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–ª–∏ —Ç—Ä–µ–∫–∏
                            queue.songs.size > 1 ? (() => {
                                const tracks = queue.songs.slice(1, 5).map((track, index) => {
                                    return `\`${index + 2}\` ${track.titleReplaced}`;
                                });

                                if (queue.songs.size > 5) return {
                                    name: `–°–ª–µ–¥—É—é—â–µ–µ - [${queue.songs.size}]`,
                                    value: tracks.join("\n")
                                };
                                return {name: "–°–ª–µ–¥—É—é—â–µ–µ:", value: tracks.join("\n")};
                            })() : null,

                            {
                                name: "",
                                value: (() => {
                                    const current = queue.player.stream?.duration || 0;
                                    const progress = new PlayerProgress({ platform,
                                        duration: { current,
                                            total: duration.seconds
                                        }
                                    });

                                    return `\n[|](${url})\`\`${current.duration()}\`\` ${progress.bar} \`\`${duration.full}\`\``;
                                })()
                            }
                        ]
                    }
                ]).setPromise((msg) => {
                    if (!db.audio.cycles.messages.array.includes(msg)) db.audio.cycles.messages.set(msg);
                });

                // –ï—Å–ª–∏ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (message) {
                    //–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message.edit({ embeds: embed.embeds as any, components: [queue.components as any] });
                    return;
                }

                embed.setTime(0).addComponents([queue.components as any]).send = queue.message;
            }
        });
    };
}

/**
 * @author SNIPPIK
 * @description –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ —Ç—Ä–µ–∫–∞
 * @class PlayerProgress
 */
class PlayerProgress {
    private static emoji: typeof db.emojis.progress = null;
    private readonly size = 12;
    private readonly options = {
        platform: null as API.platform,
        duration: {
            current: 0 as number,
            total: 0 as number
        }
    };

    private get duration() { return this.options.duration; };

    private get emoji() {
        if (!PlayerProgress.emoji) PlayerProgress.emoji = db.emojis.progress;
        return PlayerProgress.emoji;
    };

    private get platform() { return this.options.platform; };

    private get bottom() { return this.emoji["bottom_" + this.platform] || this.emoji.bottom; };

    public get bar() {
        const size =  this.size, {current, total} = this.duration, emoji = this.emoji;
        const number = Math.round(size * (isNaN(current) ? 0 : current / total));
        let txt = current > 0 ? `${emoji.upped.left}` : `${emoji.empty.left}`;

        //–°–µ—Ä–µ–¥–∏–Ω–∞ –¥–æ—Ä–æ–∂–∫–∏ + —Ç–æ—á–∫–∞
        if (current === 0) txt += `${emoji.upped.center.repeat(number)}${emoji.empty.center.repeat((size + 1) - number)}`;
        else if (current >= total) txt += `${emoji.upped.center.repeat(size)}`;
        else txt += `${emoji.upped.center.repeat(number)}${this.bottom}${emoji.empty.center.repeat(size - number)}`;

        return txt + (current >= total ? `${emoji.upped.right}` : `${emoji.empty.right}`);
    };

    public constructor(options: PlayerProgress["options"]) {
        Object.assign(this.options, options);
        this.options.platform = options.platform.toLowerCase() as any;
    };
}

/**
 * @export default
 * @description –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
 */
export default Object.values({onPlaying, onError, onSearch, onPush});