import { Declare, Options, Command, CommandContext, SubCommand, Middlewares, Permissions } from "#handler/commands";
import { ApplicationCommandOptionType } from "discord.js";
import { locale } from "#structures";
import { db } from "#app/db";

/**
 * @description –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∑–∞–¥
 */
@Declare({
    names: {
        "en-US": "back",
        "ru": "–Ω–∞–∑–∞–¥"
    },
    descriptions: {
        "en-US": "Move current track to past!",
        "ru": "–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∫ –ø—Ä–æ—à–ª–æ–º—É!"
    }
})
@Options({
    back: {
        names: {
            "en-US": "value",
            "ru": "—á–∏—Å–ª–æ"
        },
        descriptions: {
            "en-US": "You need to specify the track number!",
            "ru": "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞!"
        },
        type: ApplicationCommandOptionType["Number"],
        required: true,
        autocomplete: ({ctx, args}) => {
            const number = parseInt(args[0]);
            const queue = db.queues.get(ctx.guildId);

            if (!queue || isNaN(number) || number <= 0) return null;

            const position = queue.tracks.position;
            const maxSuggestions = 5;
            const highlightIndex = 0;
            const startIndex = Math.max(0, position - number);

            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏
            const tracks = queue.tracks.array(maxSuggestions, startIndex);

            // –ï—Å–ª–∏ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç
            if (!tracks.length) return null;

            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            const results = tracks.map((track, i) => ({
                name: `${startIndex + i + 1}. ${i === highlightIndex ? "‚û°" : "üé∂"} (${track.time.split}) ${track.name.slice(0, 75)}`,
                value: startIndex + i
            }));

            return ctx.respond(results);
        }
    }
})
class BackPositionCommand extends SubCommand {
    async run({ctx, args}: CommandContext<number>) {
        const number = args[0];
        const {player, tracks} = db.queues.get(ctx.guildId);
        const track = tracks.get(number);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç—Ä–µ–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç
        if (!track) return null;

        const {name, url, api} = track;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∑–∏—Ü–∏–∏
        await player.play(0, 0, number);

        return ctx.reply({
            embeds: [
                {
                    description: locale._(ctx.locale, "command.position", [number - 1, `[${name}](${url})`]),
                    color: api.color
                }
            ],
            flags: "Ephemeral"
        });
    };
}


/**
 * @description –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤–ø–µ—Ä–µ–¥
 */
@Declare({
    names: {
        "en-US": "next",
        "ru": "–≤–ø–µ—Ä–µ–¥"
    },
    descriptions: {
        "en-US": "Skip tracks from the current to the specified track!",
        "ru": "–ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞!"
    }
})
@Options({
    next: {
        names: {
            "en-US": "value",
            "ru": "—á–∏—Å–ª–æ"
        },
        descriptions: {
            "en-US": "You need to specify the track number!",
            "ru": "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞!"
        },
        type: ApplicationCommandOptionType["Number"],
        required: true,
        autocomplete: ({ctx, args}) => {
            const number = parseInt(args[0]);
            const queue = db.queues.get(ctx.guildId);

            if (!queue || isNaN(number) || number <= 0) return null;

            const total = queue.tracks.total;
            const position = queue.tracks.position;
            const maxSuggestions = 5;
            const highlightIndex = 0;
            const startIndex = Math.min(total - 1, position + (number - 1));

            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏
            const tracks = queue.tracks.array(maxSuggestions, startIndex);

            // –ï—Å–ª–∏ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç
            if (!tracks.length) return null;

            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            const results = tracks.map((track, i) => ({
                name: `${startIndex + i + 1}. ${i === highlightIndex ? "‚û°" : "üé∂"} (${track.time.split}) ${track.name.slice(0, 75)}`,
                value: startIndex + i
            }));

            return ctx.respond(results);
        }
    }
})
class SkipPositionCommand extends SubCommand {
    async run({ctx, args}: CommandContext<number>) {
        const number = args[0];
        const {player, tracks} = db.queues.get(ctx.guildId);
        const track = tracks.get(number);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç—Ä–µ–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç
        if (!track) return null;

        const {name, url, api} = track;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∑–∏—Ü–∏–∏
        await player.play(0, 0, number);

        return ctx.reply({
            embeds: [
                {
                    description: locale._(ctx.locale, "command.skip.arg.track", [number + 1, `[${name}](${url})`]),
                    color: api.color
                }
            ],
            flags: "Ephemeral"
        });
    };
}


/**
 * @description –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏
 */
@Declare({
    names: {
        "en-US": "to",
        "ru": "–Ω–∞"
    },
    descriptions: {
        "en-US": "Go to the specified track!",
        "ru": "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç—Ä–µ–∫—É!"
    }
})
@Options({
    to: {
        names: {
            "en-US": "value",
            "ru": "—á–∏—Å–ª–æ"
        },
        descriptions: {
            "en-US": "You need to specify the track number!",
            "ru": "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞!"
        },
        type: ApplicationCommandOptionType["Number"],
        required: true,
        autocomplete: ({ctx, args}) => {
            const number = parseInt(args[0]);
            const queue = db.queues.get(ctx.guildId);

            if (!queue || isNaN(number) || number <= 0) return null;

            const { total } = queue.tracks;
            const max = 5;
            const index = number - 1;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –∏–Ω–¥–µ–∫—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            let start = Math.max(0, index - Math.floor(max / 2));
            if (index >= total) start = Math.max(0, total - max);
            else if (start + max > total) start = Math.max(0, total - max);

            const highlight = Math.max(0, index - start);

            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤
            const tracks = queue.tracks.array(max, start);
            if (!tracks.length) return null;

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const results = tracks.map((track, i) => ({
                name: `${start + i + 1}. ${i === highlight ? "‚û°" : "üé∂"} (${track.time.split}) ${track.name.slice(0, 75)}`,
                value: start + i
            }));

            return ctx.respond(results);
        }
    }
})
class ToPositionCommand extends SubCommand {
    async run({ctx, args}: CommandContext<number>) {
        const number = args[0];
        const {player, tracks} = db.queues.get(ctx.guildId);
        const track = tracks.get(number);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç—Ä–µ–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç
        if (!track) return null;

        const {name, url, api} = track;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∑–∏—Ü–∏–∏
        await player.play(0, 0, number);

        return ctx.reply({
            embeds: [
                {
                    description: locale._(ctx.locale, "command.skip.arg.track", [number + 1, `[${name}](${url})`]),
                    color: api.color
                }
            ],
            flags: "Ephemeral"
        });
    };
}


/**
 * @author SNIPPIK
 * @description –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–æ–≤ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞!
 * @class SkipUtilityCommand
 * @extends Command
 * @public
 */
@Declare({
    names: {
        "en-US": "skip",
        "ru": "–ø—Ä–æ–ø—É—Å–∫"
    },
    descriptions: {
        "en-US": "Skip tracks to the specified track! The specified track will be current!",
        "ru": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π —Ç—Ä–µ–∫–∞!"
    },
    integration_types: ["GUILD_INSTALL"]
})
@Options([BackPositionCommand, SkipPositionCommand, ToPositionCommand])
@Middlewares(["cooldown", "queue", "voice", "another_voice", "player-not-playing", "player-wait-stream"])
@Permissions({
    client: ["SendMessages", "ViewChannel"]
})
class SkipUtilityCommand extends Command {
    async run() {}
}

/**
 * @export default
 * @description –ù–µ –¥–∞–µ–º –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞–º –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–µ–∑–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
export default [SkipUtilityCommand];