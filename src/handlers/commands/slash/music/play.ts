import { Command, CommandContext, Declare, Middlewares, Options, Permissions, SubCommand } from "#handler/commands";
import { ApplicationCommandOptionType } from "discord.js";
import { CompeteInteraction } from "#structures/discord";
import { RestClientSide } from "#handler/rest";
import { locale } from "#structures";
import { db } from "#app/db";

/**
 * @author SNIPPIK
 * @description –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ
 * @param platform - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
 * @param search - –¢–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function allAutoComplete(message: CompeteInteraction, platform: RestClientSide.Request, search: string) {
    // –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    if (platform?.block || !platform?.auth) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const api = platform.request(search, { audio: false });

    if (!api.type) return;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ rest/API
        const rest = await api.request();
        const items: { value: string; name: string }[] = [];

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        if (rest instanceof Error || !rest) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        if (Array.isArray(rest)) {
            items.push(...rest.map((track) => {
                return {
                    name: `üéµ (${track.time.split}) | ${track.artist.title.slice(0, 20)} - ${track.name.slice(0, 60)}`,
                    value: track.url,
                }
            }));
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        else if ("items" in rest) items.push({
            name: `üé∂ [${rest.items.length}] - ${rest.title.slice(0, 70)}`,
            value: search
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–∫
        else {
            items.push({
                name: `üéµ (${rest.time.split}) | ${rest.artist.title.slice(0, 20)} - ${rest.name.slice(0, 60)}`,
                value: search
            });
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        return message.respond(items);
    } catch (err) {
        console.error(err);
        return null;
    }
}

/**
 * @description –ü–æ–¥ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞
 * @type SubCommand
 */
@Declare({
    names: {
        "en-US": "search",
        "ru": "–ø–æ–∏—Å–∫"
    },
    descriptions: {
        "en-US": "Turn on music by link or title!",
        "ru": "–í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é!"
    }
})
@Options({
    select: {
        names: {
            "en-US": "select",
            "ru": "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        },
        descriptions: {
            "en-US": "Which platform does the request belong to?",
            "ru": "–ö –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å?"
        },
        type: ApplicationCommandOptionType["String"],
        required: true,
        choices: db.api.array.map((platform) => {
            return {
                name: `${platform.name.toLowerCase()} | ${platform.url}`,
                value: platform.name
            }
        })
    },
    request: {
        names: {
            "en-US": "request",
            "ru": "–∑–∞–ø—Ä–æ—Å"
        },
        descriptions: {
            "en-US": "You must specify the link or the name of the track!",
            "ru": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!"
        },
        required: true,
        type: ApplicationCommandOptionType["String"],
        autocomplete: ({ctx, args}) => {
            if (!args[1] || args[1] === "") return null;

            const platform = db.api.request(args[0]);
            return allAutoComplete(ctx, platform, args[1]);
        }
    }
})
class PlaySearchCommand extends SubCommand {
    async run({ctx, args}: CommandContext) {
        const platform = db.api.request(args[0]);
        await ctx.deferReply();

        // –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        if (platform.block) {
            db.events.emitter.emit("rest/error", ctx, locale._(ctx.locale, "api.platform.block"));
            return null;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        else if (!platform.auth) {
            db.events.emitter.emit("rest/error", ctx, locale._(ctx.locale, "api.platform.auth"));
            return null;
        }

        db.events.emitter.emit("rest/request", platform, ctx, args[1]);
        return null;
    };
}


/**
 * @description –ü–æ–¥ –∫–æ–º–∞–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–µ–∫–æ–≤
 * @type SubCommand
 */
@Declare({
    names: {
        "en-US": "related",
        "ru": "–ø–æ—Ö–æ–∂–µ–µ"
    },
    descriptions: {
        "en-US": "Endless track playback mode!",
        "ru": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ –ø–æ–¥–æ–±–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤!"
    },
})
@Options({
    select: {
        names: {
            "en-US": "select",
            "ru": "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        },
        descriptions: {
            "en-US": "Which platform does the request belong to?",
            "ru": "–ö –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å?"
        },
        type: ApplicationCommandOptionType["String"],
        required: true,
        choices: db.api.arrayRelated.map((platform) => {
            return {
                name: `${platform.name.toLowerCase()} | ${platform.url}`,
                value: platform.name
            }
        })
    },
    request: {
        names: {
            "en-US": "request",
            "ru": "–∑–∞–ø—Ä–æ—Å"
        },
        descriptions: {
            "en-US": "You must specify the link or the name of the track!",
            "ru": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!"
        },
        required: true,
        type: ApplicationCommandOptionType["String"],
        autocomplete: ({ctx, args}) => {
            if (!args[1] || args[1] === "") return null;

            const platform = db.api.request(args[0]);
            return allAutoComplete(ctx, platform, args[1]);
        }
    }
})
class PlayRelatedCommand extends SubCommand {
    async run({ctx, args}: CommandContext) {
        const platform = db.api.request(args[0] as any);
        await ctx.deferReply();

        // –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        if (platform.block) {
            db.events.emitter.emit("rest/error", ctx, locale._(ctx.locale, "api.platform.block"));
            return null;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        else if (!platform.auth) {
            db.events.emitter.emit("rest/error", ctx, locale._(ctx.locale, "api.platform.auth"));
            return null;
        }

        db.events.emitter.emit("rest/request", platform, ctx, `${args[1]}&list=RD`);
        return null;
    };
}


/**
 * @author SNIPPIK
 * @description –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
 * @class PlayAdvancedCommand
 * @extends Command
 * @public
 */
@Declare({
    names: {
        "en-US": "pl–∞—É",
        "ru": "–∏–≥—Äa—Ç—å"
    },
    descriptions: {
        "en-US": "Advanced control of music inclusion!",
        "ru": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏!"
    },
    integration_types: ["GUILD_INSTALL"]
})
@Options([PlaySearchCommand, PlayRelatedCommand])
@Middlewares(["cooldown", "voice", "another_voice"])
@Permissions({
    client: ["SendMessages", "ViewChannel"]
})
class PlayAdvancedCommand extends Command {
    async run() {}
}


/**
 * @author SNIPPIK
 * @description –ë–∞–∑–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
 * @class PlayCommand
 * @extends Assign
 * @public
 */
@Declare({
    names: {
        "en-US": "play",
        "ru": "–∏–≥—Ä–∞—Ç—å"
    },
    descriptions: {
        "en-US": "Turning on music, or searching for music!",
        "ru": "–í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏, –∏–ª–∏ –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏!"
    },
    integration_types: ["GUILD_INSTALL"]
})
@Options({
    request: {
        names: {
            "en-US": "request",
            "ru": "–∑–∞–ø—Ä–æ—Å"
        },
        descriptions: {
            "en-US": "You must specify the link or the name of the track!",
            "ru": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!"
        },
        required: true,
        type: ApplicationCommandOptionType["String"],
        autocomplete: ({ctx, args}) => {
            const platform = db.api.request(args[0]);
            return allAutoComplete(ctx, platform, args[0]);
        }
    }
})
@Middlewares(["cooldown", "voice", "another_voice"])
@Permissions({
    client: ["SendMessages", "ViewChannel"]
})
class PlayCommand extends Command {
    async run({ctx, args}: CommandContext) {
        const platform = db.api.request(args[0]);
        await ctx.deferReply();

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∞—Å—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
        if (!platform) {
            db.events.emitter.emit("rest/error", ctx, locale._(ctx.locale, "api.platform.support"));
            return null;
        }

        // –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        else if (platform.block) {
            db.events.emitter.emit("rest/error", ctx, locale._(ctx.locale, "api.platform.block"));
            return null;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        else if (!platform.auth) {
            db.events.emitter.emit("rest/error", ctx, locale._(ctx.locale, "api.platform.auth"));
            return null;
        }

        db.events.emitter.emit("rest/request", platform, ctx, args[0]);
        return null;
    };
}

/**
 * @export default
 * @description –ù–µ –¥–∞–µ–º –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞–º –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–µ–∑–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
export default [ PlayCommand, PlayAdvancedCommand ];