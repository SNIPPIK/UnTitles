import { Command, CommandContext, Declare, Options, Permissions, Middlewares } from "#handler/commands";
import { ApplicationCommandOptionType } from "discord.js";
import { Colors } from "#structures/discord";
import { locale } from "#structures";
import { db } from "#app/db";


/**
 * @author SNIPPIK
 * @description –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
 * @class RemoveTracksCommand
 * @extends Command
 * @public
 */
@Declare({
    names: {
        "en-US": "remove",
        "ru": "—É–¥–∞–ª–∏—Ç—å"
    },
    descriptions: {
        "en-US": "Deleting a track from the queue, without the possibility of recovery!",
        "ru": "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!"
    }
})
@Options({
    remove: {
        names: {
            "en-US": "value",
            "ru": "—á–∏—Å–ª–æ"
        },
        descriptions: {
            "en-US": "Number track in queue!",
            "ru": "–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞!"
        },
        type: ApplicationCommandOptionType["Number"],
        required: true,
        autocomplete: ({ctx, args}) => {
            const number = args[0];
            const queue = db.queues.get(ctx.guildId);
            if (!queue || isNaN(number) || number <= 0) return null;

            const total = queue.tracks.total;
            const maxSuggestions = 5;
            const index = number - 1;

            if (index < 0 || index >= total) return null;

            const half = Math.floor(maxSuggestions / 2);
            let startIndex = Math.max(0, index - half);

            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞
            if (startIndex + maxSuggestions > total) {
                startIndex = Math.max(0, total - maxSuggestions);
            }

            const tracks = queue.tracks.array(maxSuggestions, startIndex);
            const highlightIndex = index - startIndex;

            const results = tracks.map((track, i) => ({
                name: `${startIndex + i + 1}. ${i === highlightIndex ? "üóëÔ∏è" : "üé∂"} (${track.time.split}) ${track.name.slice(0, 75)}`,
                value: startIndex + i
            }));

            return ctx.respond(results);
        },
    }
})
@Middlewares(["cooldown", "queue", "voice", "another_voice", "player-not-playing", "player-wait-stream"])
@Permissions({
    client: ["SendMessages", "ViewChannel"]
})
class RemoveTracksCommand extends Command {
    async run({ctx, args}: CommandContext<number>) {
        const queue = db.queues.get(ctx.guildId);
        const number = args[0];
        const track = queue.tracks.get(number);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç—Ä–µ–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç
        if (!track) {
            return ctx.reply({
                embeds: [
                    {
                        description: locale._(ctx.locale, "command.remove.track.fail", [ctx.member]),
                        color: Colors.DarkRed
                    }
                ],
                flags: "Ephemeral"
            });
        }

        const {name, url, api} = track;

        // –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫ –∏ –æ—á–µ—Ä–µ–¥–∏
        queue.tracks.remove(number);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        if ((number - 1) === queue.tracks.position) {
            // –ï—Å–ª–∏ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
            if (!queue.tracks.total) return queue.cleanup();
            await queue.player.play(0, 0, queue.tracks.position);
        }

        return ctx.reply({
            embeds: [
                {
                    description: locale._(ctx.locale, "command.remove.track", [`[${name}](${url})`]),
                    color: api.color
                }
            ],
            flags: "Ephemeral"
        });
    }
}

/**
 * @export default
 * @description –ù–µ –¥–∞–µ–º –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞–º –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–µ–∑–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
export default [ RemoveTracksCommand ];