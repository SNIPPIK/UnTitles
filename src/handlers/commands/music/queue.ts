import { Command, CommandContext, Declare, Middlewares, Options, Permissions, SubCommand } from "#handler/commands";
import { ApplicationCommandOptionType } from "discord-api-types/v10";
import { Colors } from "#structures/discord";
import { locale } from "#structures";
import { db } from "#app/db";

/**
 * @author SNIPPIK
 * @description –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
 * @class QueueList
 * @extends SubCommand
 */
@Declare({
    names: {
        "en-US": "list",
        "ru": "—Å–ø–∏—Å–æ–∫"
    },
    descriptions: {
        "en-US": "View tracks in the current queue!",
        "ru": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏!"
    }
})
@Options({
    type: {
        names: {
            "en-US": "value",
            "ru": "—á–∏—Å–ª–æ"
        },
        descriptions: {
            "en-US": "Specify the track position to get +-10 tracks. When selected, the selected one will be shown",
            "ru": "–£–∫–∞–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è +-10 —Ç—Ä–µ–∫–æ–≤. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π"
        },
        type: ApplicationCommandOptionType.Number,
        required: true,
        autocomplete: ({ ctx, args }) => {
            const { tracks } = db.queues.get(ctx.guildId);
            const { position } = tracks;
            const center = args[0] ?? position;

            const before = tracks.array(-10, center);
            const after = tracks.array(10, center);

            return ctx.respond(
                [...before, ...after].map((track, i) => {
                    const index = center - before.length + i;
                    const isCurrent = index === position;
                    const Selected = (args[0] - 1) === index;

                    return {
                        name: `${index + 1}. ${isCurrent ? "üéµ" : Selected ? "‚û°Ô∏è" : "üé∂"} (${track.time.split}) | ${track.artist.title.slice(0, 35)} - ${track.name.slice(0, 75)}`,
                        value: index
                    };
                })
            );
        }
    }
})
class QueueList extends SubCommand {
    async run({ctx, args}: CommandContext<number>) {
        const queue = db.queues.get(ctx.guildId);
        const track = queue.tracks.get(args[0]);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫
        if (!track) return ctx.reply(
            {
                embeds: [
                    {
                        description: locale._(ctx.locale, "command.queue.track.notfound", [queue.tracks.total]),
                        color: Colors.White
                    }
                ],
                flags: "Ephemeral"
            }
        );

        const {artist, url, name, image, api, ID, time, user, link} = track;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
        return ctx.reply({
            embeds: [
                {
                    author: {
                        url: artist.url,
                        name: artist.title,
                        icon_url: artist.image.url
                    },
                    thumbnail: image,
                    description: `[${name}](${url})\n - ${ID}\n - ${time.split}` + (link && link.startsWith("http") ? `\n - üíΩ: ‚ùå` : link ? "\n - üíΩ: ‚úÖ" : ""),
                    color: api.color,

                    footer: {
                        text: `${user.username} | ${api.name} - ${api.url}`,
                        icon_url: user.avatar
                    }
                }
            ],
            flags: "Ephemeral"
        });
    };
}


/**
 * @author SNIPPIK
 * @description –£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
 * @class QueueDestroy
 * @extends SubCommand
 */
@Declare({
    names: {
        "en-US": "destroy",
        "ru": "—É–¥–∞–ª–µ–Ω–∏–µ"
    },
    descriptions: {
        "en-US": "Queue deletion! No way to return tracks, player, queue!",
        "ru": "–£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏! –ë–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å —Ç—Ä–µ–∫–∏, –ø–ª–µ–µ—Ä, –æ—á–µ—Ä–µ–¥—å!"
    }
})
class QueueDestroy extends SubCommand {
    async run({ctx}: CommandContext) {
        db.queues.remove(ctx.guildId);
        db.voice.remove(ctx.guildId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
        return ctx.reply({
            embeds: [
                {
                    description: locale._(ctx.locale, "command.queue.destroy"),
                    color: Colors.White
                }
            ],
            flags: "Ephemeral"
        });
    };
}


/**
 * @author SNIPPIK
 * @description –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é
 * @class QueueCommand
 * @extends Command
 * @public
 */
@Declare({
    names: {
        "en-US": "queue",
        "ru": "–æ—á–µ—Ä–µ–¥—å"
    },
    descriptions: {
        "en-US": "Advanced control of music inclusion!",
        "ru": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏!"
    },
    integration_types: ["GUILD_INSTALL"]
})
@Options([QueueList, QueueDestroy])
@Middlewares(["cooldown", "voice", "another_voice", "queue"])
@Permissions({
    client: ["SendMessages", "ViewChannel"]
})
class QueueCommand extends Command {
    async run() {}
}

/**
 * @export default
 * @description –ù–µ –¥–∞–µ–º –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞–º –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–µ–∑–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
export default [QueueCommand];