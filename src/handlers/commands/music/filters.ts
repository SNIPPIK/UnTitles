import { Declare, Options, Middlewares, Permissions, SubCommand, CommandContext, Command } from "#handler/commands";
import { ApplicationCommandOptionType } from "discord.js";
import filters from "#core/player/filters.json";
import type { AudioFilter } from "#core/player";
import { Colors } from "#structures/discord";
import { locale } from "#structures";
import { db } from "#app/db";

/**
 * @description –ü–æ–¥ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∏–ª—å—Ç—Ä–∞
 */
@Declare({
    names: {
        "en-US": "push",
        "ru": "–¥–æ–±–∞–≤–∏—Ç—å"
    },
    descriptions: {
        "en-US": "Adding filters!",
        "ru": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤!"
    }
})
@Options({
    list: {
        names: {
            "en-US": "filters",
            "ru": "—Ñ–∏–ª—å—Ç—Ä—ã"
        },
        descriptions: {
            "en-US": "You need to select a filter! [names] - <allowable range> - description",
            "ru": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä! [–Ω–∞–∑–≤–∞–Ω–∏—è] - <–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω> - –æ–ø–∏—Å–∞–Ω–∏–µ"
        },
        type: ApplicationCommandOptionType["String"],
        required: true,
        choices: db.commands.filters_choices
    },
    argument: {
        names: {
            "en-US": "argument",
            "ru": "–∞—Ä–≥—É–º–µ–Ω—Ç"
        },
        descriptions: {
            "en-US": "An argument for the filter, if necessary!",
            "ru": "–ê—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º!"
        },
        type: ApplicationCommandOptionType["String"]
    }
})
class AudioFilterPush extends SubCommand {
    async execute({message, args}: CommandContext<string>) {
        const queue = db.queues.get(message.guildId);
        const player = queue.player;
        const seek: number = player.audio.current?.duration ?? 0;
        const name = args && args?.length > 0 ? args[0] : null;
        const argument = args && args?.length > 1 ? Number(args[1]) : null;

        const Filter = filters.find((item) => item.name === name) as AudioFilter;
        const findFilter = player.filters.enabled.find((fl) => fl.name === name);

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        if (findFilter) {
            return message.reply({
                embeds: [
                    {
                        description: locale._(message.locale, "command.filter.push.two"),
                        color: Colors.Yellow
                    }
                ],
                flags: "Ephemeral"
            });
        }

        // –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        else if (Filter.args) {
            // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç
            if (argument && argument >= Filter.args[0] && argument <= Filter.args[1]) Filter.argument = argument;
            else {
                return message.reply({
                    embeds: [
                        {
                            description: locale._(message.locale, "command.filter.push.argument", Filter.args),
                            color: Colors.Yellow
                        }
                    ],
                    flags: "Ephemeral"
                });
            }
        }

        // –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç –ª–∏ –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å —É–∂–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏
        for (const enabledFilter of player.filters.enabled) {
            if (!enabledFilter) continue;

            // –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å —É–∂–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã–º?
            if (Filter.unsupported.includes(enabledFilter.name)) {
                return message.reply({
                    embeds: [
                        {
                            description: locale._(message.locale, "command.filter.push.unsupported", [Filter.name, enabledFilter.name]),
                            color: Colors.DarkRed
                        }
                    ],
                    flags: "Ephemeral"
                });
            }

            // –£–∂–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –Ω–æ–≤—ã–º?
            if (enabledFilter.unsupported.includes(Filter.name)) {
                return message.reply({
                    embeds: [
                        {
                            description: locale._(message.locale, "command.filter.push.unsupported", [enabledFilter.name, Filter.name]),
                            color: Colors.DarkRed
                        }
                    ],
                    flags: "Ephemeral"
                });
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        player.filters.enabled.add(Filter);

        // –ï—Å–ª–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–π—á–∞—Å
        if (player.audio.current.duration < player.tracks.track.time.total - db.queues.options.optimization) {
            await player.play(seek);

            // –°–æ–æ–±—â–∞–µ–º –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            return message.reply({
                embeds: [
                    {
                        description: locale._(message.locale, "command.filter.push.before", [Filter.name, Filter.locale[message.locale].split(" - ").pop()]),
                        color: Colors.Green,
                        timestamp: new Date() as any
                    }
                ],
                flags: "Ephemeral"
            });
        }

        // –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–π—á–∞—Å.
        // –°–æ–æ–±—â–∞–µ–º –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        return message.reply({
            embeds: [
                {
                    description: locale._(message.locale, "command.filter.push.after", [Filter.name, Filter.locale[message.locale].split(" - ").pop()]),
                    color: Colors.Green,
                    timestamp: new Date() as any
                }
            ],
            flags: "Ephemeral"
        });
    }
}


/**
 * @description –ü–æ–¥ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
@Declare({
    names: {
        "en-US": "off",
        "ru": "–≤—ã–∫–ª"
    },
    descriptions: {
        "en-US": "Disable all filters!",
        "ru": "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤!"
    }
})
class AudioFiltersOff extends SubCommand {
    async execute({message}: CommandContext<string>) {
        const queue = db.queues.get(message.guildId);
        const player = queue.player;

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (player.filters.enabled.size === 0) {
            return message.reply({
                embeds: [
                    {
                        description: locale._(message.locale, "command.filter.off.null"),
                        color: Colors.Yellow
                    }
                ],
                flags: "Ephemeral"
            });
        }

        // –ï—Å–ª–∏ –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–π—á–∞—Å
        if (player.audio.current.duration < player.tracks.track.time.total - db.queues.options.optimization) {
            await player.play(player.audio.current?.duration);

            // –°–æ–æ–±—â–∞–µ–º –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            return message.reply({
                embeds: [
                    {
                        description: locale._(message.locale, "command.filter.off.after"),
                        color: Colors.Green,
                        timestamp: new Date() as any,
                    }
                ],
                flags: "Ephemeral"
            });
        }

        // –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–π—á–∞—Å
        else {
            // –°–æ–æ–±—â–∞–µ–º –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await message.reply({
                embeds: [
                    {
                        description: locale._(message.locale, "command.filter.off.before"),
                        color: Colors.Green,
                        timestamp: new Date() as any
                    }
                ],
                flags: "Ephemeral"
            });
        }

        // –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        player.filters.enabled.clear();
        return null;
    }
}


/**
 * @description –ü–æ–¥ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è 1 —Ñ–∏–ª—å—Ç—Ä–∞
 */
@Declare({
    names: {
        "en-US": "disable",
        "ru": "–æ—Ç–∫–ª—é—á–∏—Ç—å"
    },
    descriptions: {
        "en-US": "Disabled filters!",
        "ru": "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤!"
    }
})
@Options({
    disable: {
        names: {
            "en-US": "filters",
            "ru": "—Ñ–∏–ª—å—Ç—Ä—ã"
        },
        descriptions: {
            "en-US": "You need to select a filter!",
            "ru": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä!"
        },
        required: true,
        type: ApplicationCommandOptionType["String"],
        autocomplete: ({message, args}) => {
            const queue = db.queues.get(message.guildId);

            // –ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
            if (!queue) return null;

            const filters = queue.player.filters.enabled;

            // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if (!filters) return null;

            const items = filters.filter(filter => !!filter.name.match(args[0])).map((filter) => {
                return {
                    name: `üåÄ ${filter.name}`,
                    value: filter.name
                }
            });

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if (!items) return null;

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            return message.respond(items);
        }
    }
})
class AudioFilterRemove extends SubCommand {
    async execute({message, args}: CommandContext<string>) {
        const queue = db.queues.get(message.guildId);
        const player = queue.player;
        const seek: number = player.audio.current?.duration ?? 0;
        const name = args && args?.length > 0 ? args[0] : null;

        const Filter = filters.find((item) => item.name === name) as AudioFilter;
        const findFilter = player.filters.enabled.find((fl) => fl.name === name);

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∫–ª—é—á–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        if (!findFilter) {
            return message.reply({
                embeds: [
                    {
                        description: locale._(message.locale, "command.filter.remove.two"),
                        color: Colors.Yellow
                    }
                ],
                flags: "Ephemeral"
            });
        }

        // –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        player.filters.enabled.delete(findFilter);

        // –ï—Å–ª–∏ –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–π—á–∞—Å
        if (player.audio.current.duration < player.tracks.track.time.total - db.queues.options.optimization) {
            await player.play(seek);

            // –°–æ–æ–±—â–∞–µ–º –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            return message.reply({
                embeds: [
                    {
                        description: locale._(message.locale, "command.filter.remove.after", [Filter.name, Filter.locale[message.locale].split(" - ").pop()]),
                        color: Colors.Green,
                        timestamp: new Date() as any
                    }
                ],
                flags: "Ephemeral"
            });
        }

        // –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–π—á–∞—Å.
        // –°–æ–æ–±—â–∞–µ–º –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        return message.reply({
            embeds: [
                {
                    description: locale._(message.locale, "command.filter.remove.before", [Filter.name, Filter.locale[message.locale].split(" - ").pop()]),
                    color: Colors.Green,
                    timestamp: new Date() as any
                }
            ],
            flags: "Ephemeral"
        });
    }
}


/**
 * @author SNIPPIK
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤
 * @class AudioFilterGroup
 * @extends Command
 * @public
 */
@Declare({
    names: {
        "en-US": "filter",
        "ru": "—Ñ–∏–ª—å—Ç—Ä"
    },
    descriptions: {
        "en-US": "Setting audio filters",
        "ru": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∞—É–¥–∏–æ!"
    },
    integration_types: ["GUILD_INSTALL"]
})
@Options([AudioFilterPush, AudioFiltersOff, AudioFilterRemove])
@Middlewares(["queue", "voice", "another_voice", "player-not-playing", "player-wait-stream"])
@Permissions({
    client: ["SendMessages", "ViewChannel"]
})
class AudioFilterGroup extends Command {
    async execute() {}
}


/**
 * @export default
 * @description –ù–µ –¥–∞–µ–º –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞–º –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–µ–∑–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
export default [AudioFilterGroup];