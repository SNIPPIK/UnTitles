import { CommandInteraction, CycleInteraction, DiscordClient } from "#structures/discord";
import { ActionRowBuilder, EmbedData, StringSelectMenuBuilder } from "discord.js";
import filters from "#core/player/filters.json";
import type { AudioPlayer } from "#core/player";
import { RepeatType } from "#core/queue";
import { env } from "#app/env";

/**
 * @author SNIPPIK
 * @description –ü—Ä–æ—Å–ª–æ–π–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏
 * @class QueueMessage
 * @public
 */
export class QueueMessage<T extends CommandInteraction> {
    private readonly _guildID: string;
    private readonly _channelID: string;
    private readonly _voiceID: string;
    private _deferred = false;

    /**
     * @description –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns Locale
     * @public
     */
    public get locale() {
        return this._original?.locale ?? this._original?.guildLocale
    };

    /**
     * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ —Å–µ—Ä–≤–µ—Ä–µ
     * @returns Guild
     * @public
     */
    public get guild() {
        return this._original.guild;
    };

    /**
     * @description –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Ä–≤–µ—Ä–∞
     * @returns string
     * @public
     */
    public get guildID() {
        return this._guildID;
    };

    /**
     * @description –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     * @returns TextChannel
     * @public
     */
    public get channel() {
        return this._original.channel;
    };

    /**
     * @description –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     * @returns string
     * @public
     */
    public get channelID() {
        return this._channelID;
    };

    /**
     * @description –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns VoiceState
     * @public
     */
    public get voice() {
        return this._original.member.voice;
    };

    /**
     * @description –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     * @returns string
     * @public
     */
    public get voiceID() {
        return this._voiceID;
    };

    /**
     * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
     * @public
     */
    public get client() {
        return this._original.client as DiscordClient;
    };

    /**
     * @description –ü–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
     * @example –û—Ç–≤–µ—Ç–∏–ª –ª–∏ –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?
     * @public
     */
    public get replied() {
        return this._original["replied"];
    };

    /**
     * @description –ü–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
     * @example –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?
     * @public
     */
    public get deferred() {
        return this._deferred;
    };
    /**
     * @description –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å discord api
     * @param _original - –ö–ª–∞—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è
     * @constructor
     * @public
     */
    public constructor(private readonly _original: T) {
        this._voiceID = _original.member.voice.channelId;
        this._channelID = _original.channelId;
        this._guildID = _original.guildId;
    };

    /**
     * @description –ê–≤—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
     * @public
     */
    public send = (options: {embeds?: EmbedData[], components?: any[], withResponse: boolean, flags?: "Ephemeral" | "IsComponentsV2"}): Promise<CycleInteraction> => {
        try {
            // –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (this.replied && !this.deferred) {
                this._deferred = true;
                return this._original.followUp(options as any) as any;
            }

            // –ï—Å–ª–∏ –º–æ–∂–Ω–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else if (!this.deferred && !this.replied) {
                this._deferred = true;
                return this._original.reply(options as any) as any;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return this._original.channel.send(options as any);
        } catch {
            this._deferred = false;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return this._original.channel.send(options as any);
        }
    };
}


/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤-–∫–Ω–æ–ø–æ–∫
 * @class QueueButtons
 * @private
 */
export class QueueButtons {
    /**
     * @author SNIPPIK
     * @description –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–µ—Ä–∞
     * @private
     */
    private static button = {
        resume: this.checkIDComponent("button.resume"),
        pause: this.checkIDComponent("button.pause"),
        loop: this.checkIDComponent("button.loop"),
        loop_one: this.checkIDComponent("button.loop_one"),
        autoplay: this.checkIDComponent("button.autoplay"),
    };

    /**
     * @description –ò–∑–º–µ–Ω—è–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
     * @private
     */
    private _buttons = [
        {
            type: 1,
            components: [
                // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
                QueueButtons.createButton({env: "shuffle", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                QueueButtons.createButton({env: "back", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                QueueButtons.createButton({emoji: QueueButtons.button.pause, id: "resume_pause"}),

                // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞/–≤–ø–µ—Ä–µ–¥
                QueueButtons.createButton({env: "skip"}),

                // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
                QueueButtons.createButton({emoji: QueueButtons.button.loop, id: "repeat"})
            ]
        },
        {
            type: 1,
            components: [
                // –ö–Ω–æ–ø–∫–∞ –æ—á–µ—Ä–µ–¥–∏
                QueueButtons.createButton({env: "queue", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
                QueueButtons.createButton({env: "lyrics"}),

                // –ö–Ω–æ–ø–∫–∞ —Å—Ç–æ–ø
                QueueButtons.createButton({env: "stop", style: 4}),

                // –ö–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                QueueButtons.createButton({env: "filters", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
                QueueButtons.createButton({env: "replay"})
            ]
        }
    ];

    /**
     * @description –°—Ç—Ä–æ–∫–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
     * @private
     */
    private _selector: ActionRowBuilder;

    /**
     * @description –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
     * @param ctx
     */
    public constructor(ctx: QueueMessage<CommandInteraction>) {
        // –†–∞–∑–æ–≤–æ —Å–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        this._selector = new ActionRowBuilder().addComponents([
            new StringSelectMenuBuilder().setCustomId("filter_select")
                .setPlaceholder("Select audio filter")
                .setOptions(filters.filter((filter) => !filter.args).map((filter) => {
                    return {
                        label: filter.name.charAt(0).toUpperCase() + filter.name.slice(1).replace("_", " "),
                        value: filter.name,
                        description: (filter.locale[ctx.locale] ?? filter.locale["en-US"]).split("]")[1],
                    }
                }))
        ]);
    };

    /**
     * @author SNIPPIK
     * @description –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –∫–Ω–æ–ø–æ–∫
     * @public
     */
    public component = (player: AudioPlayer) => {
        const [firstRow, secondRow] = [this._buttons[0].components, this._buttons[1].components];

        const isMultipleTracks = player.tracks.total > 1;
        const isShuffled = player.tracks.shuffle;
        const isPaused = player.status === "player/pause";
        const currentRepeatType = player.tracks.repeat;
        const hasFilters = player.filters.size > 0;

        // –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        const setButton = (btn: any, { disabled, style, emoji }: { disabled?: boolean; style?: number; emoji?: any }) => {
            if (disabled !== undefined) btn.disabled = disabled;
            if (style !== undefined) btn.style = style;
            if (emoji !== undefined) btn.emoji = emoji;
        };

        // üîÄ Shuffle
        setButton(firstRow[0], {
            disabled: !isMultipleTracks,
            style: isShuffled ? 3 : 2,
        });

        // ‚èÆ Prev
        setButton(firstRow[1], {
            disabled: !isMultipleTracks,
            style: isMultipleTracks ? 1 : 2,
        });

        // ‚è≠ Next
        setButton(firstRow[3], {
            disabled: !isMultipleTracks,
            style: isMultipleTracks ? 1 : 2,
        });

        // üîÅ Repeat
        setButton(firstRow[4], {
            emoji: currentRepeatType === RepeatType.Song ? QueueButtons.button.loop_one :
                currentRepeatType === RepeatType.AutoPlay ? QueueButtons.button.autoplay : QueueButtons.button.loop,
            //emoji: currentRepeatType === RepeatType.Song ? QueueButtons.button.loop_one : QueueButtons.button.loop,
            style: currentRepeatType === RepeatType.None ? 2 : 3,
        });

        // ‚è∏ / ‚ñ∂ Pause / Resume
        setButton(firstRow[2], {
            emoji: isPaused ? QueueButtons.button.resume : QueueButtons.button.pause,
            style: isPaused ? 3 : 1,
        });

        // üéö Filters
        setButton(secondRow[3], { disabled: !hasFilters });

        // üìë Queue
        setButton(secondRow[0], { disabled: !isMultipleTracks });

        return [this._selector, this._buttons[0], this._buttons[1]];
    };

    /**
     * @description –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–≥–¥–∞ –æ–Ω–∏ —É–∂–µ –Ω–µ –Ω—É–∂–Ω—ã
     * @public
     */
    public destroy() {
        this._buttons = null;
        this._selector = null;
    };

    /**
     * @author SNIPPIK
     * @description –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É id
     * @param name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ env
     * @private
     */
    private static checkIDComponent(name: string) {
        const id = env.get(name);
        const int = parseInt(id);

        if (isNaN(int)) return { name: `${id}` };
        return { id };
    };

    /**
     * @author SNIPPIK
     * @description –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
     * @param options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     * @private
     */
    private static createButton(options: any) {
        let button = {
            type: 2,
            style: options.style ?? 2,
            disabled: options.disabled,
            custom_id: null,
        };


        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω env
        if ("env" in options) return {...button,
            emoji: this.checkIDComponent(`button.${options.env}`),
            custom_id: options.env
        }

        return {...button,
            emoji: options.emoji,
            custom_id: options.id
        }
    };
}