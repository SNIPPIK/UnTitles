import { StringSelectMenuBuilder, ActionRowBuilder } from "discord.js";
import { ControllerTracks } from "#service/player/controllers/tracks";
import { ControllerVoice } from "#service/player/controllers/voice";
import { AudioPlayer, RepeatType } from "#service/player";
import { CommandInteraction, Logger } from "#structures";
import filters from "#service/player/filters.json";
import { VoiceConnection } from "#service/voice";
import { QueueMessage } from "./message";
import { Track } from "./track";
import { env } from "#app/env";
import { db } from "#app/db";

/**
 * @author SNIPPIK
 * @description –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ—á–µ—Ä–µ–¥–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
 * @class BaseQueue
 * @abstract
 */
abstract class BaseQueue {
    /**
     * @description –í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –∂–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏
     * @protected
     * @readonly
     */
    protected readonly _timestamp = new Date();

    /**
     * @description –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @protected
     */
    protected _message: QueueMessage<CommandInteraction>;

    /**
     * @description –ü–ª–µ–µ—Ä –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏
     * @protected
     */
    protected _player: AudioPlayer;

    /**
     * @description –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç—Ä–µ–∫–æ–≤, —Å —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @protected
     */
    protected _tracks: ControllerTracks<Track> = new ControllerTracks();

    /**
     * @description –ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
     * @protected
     */
    protected _voice: ControllerVoice<VoiceConnection> = new ControllerVoice();

    /*=== TEXT CHANNEL ===*/

    /**
     * @description –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     * @param message - –°–æ—Ö—Ä–∞–Ω—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @public
     */
    public set message(message) {
        this._cleanupOldMessage();
        this._message = message;
    };

    /**
     * @description –í—ã–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return Client.message
     * @public
     */
    public get message() {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (!this._message) return null;
        return this._message;
    };

    /**
     * @description –í—ã–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å
     * @return Guild
     * @public
     */
    public get guild() {
        if (!this.message) return null;
        return this.message.guild;
    };

    /*=== TEXT CHANNEL ===*/
    /*=== AudioPlayer ===*/

    /**
     * @description –í—ã–¥–∞–µ–º –ø–ª–µ–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –æ—á–µ—Ä–µ–¥–∏
     * @return AudioPlayer
     * @public
     */
    public get player() {
        // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!this._player) return null;
        return this._player;
    };

    /**
     * @description –í—ã–¥–∞–µ–º –ø–ª–µ–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –æ—á–µ—Ä–µ–¥–∏
     * @return AudioPlayer
     * @public
     */
    public set player(player) {
        this._player = player;
    };

    /*=== AudioPlayer ===*/
    /*=== Voice Connection ===*/

    /**
     * @description –í—ã–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
     * @return VoiceChannel
     * @public
     */
    public get voice() {
        return this._voice;
    };

    /**
     * @description –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     * @param voice - –°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
     * @public
     */
    public set voice(voice) {
        this._voice = voice;
    };

    /*=== Voice Connection ===*/
    /*=== Tracks ===*/

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–∫–∞–º
     * @public
     */
    public get tracks() {
        return this._tracks;
    };

    /*=== Tracks ===*/

    /**
     * @description –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã, –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–¥–µ—Å—å
     * @param message - –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
     * @public
     */
    protected constructor(message: CommandInteraction) {
        const queue_message = new QueueMessage(message);
        const ID = queue_message.guildID;

        // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–µ—Ä
        this.player = new AudioPlayer(ID, this._tracks, this._voice);

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª–∞—Å—Å
        this.message = queue_message;

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        this.voice.join(queue_message.client, queue_message.voice);

        // –í –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è (–ø–æ–ª–µ–∑–Ω–æ –µ—Å–ª–∏ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–µ—Ä–µ –µ—â–µ –Ω–µ—Ç)
        setImmediate(this.player.play);

        Logger.log("LOG", `[Queue/${ID}] has create`);
    };

    /**
     * @description –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å
     * @readonly
     * @public
     */
    public cleanup = () => {
        Logger.log("DEBUG", `[Queue/${this.message.guildID}] has cleanup`);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä
        if (this.player) this.player.cleanup();

        // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        this._cleanupOldMessage();
    };

    /**
     * @description –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ –≤—Å–µ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –∫–ª–∞—Å—Å–µ
     * @protected
     * @readonly
     */
    protected destroy = () => {
        Logger.log("LOG", `[Queue/${this.message.guildID}] has destroyed`);

        // –£–¥–∞–ª—è–µ–º –ø–ª–µ–µ—Ä
        if (this.player) this.player.destroy();
        this._tracks.clear();
    };

    /**
     * @description –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     * @param message - —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private _cleanupOldMessage = () => {
        // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (this._message && this._message.guild) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            const message = db.queues.cycles.messages.find((msg) => {
                return msg.guildId === this._message.guildID;
            });

            if (message) db.queues.cycles.messages.delete(message);
        }
    };
}

/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π, –±–µ—Å–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–¥–µ—Ç –∫ –ø–æ–ª–æ–º–∫–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞!!!
 * @extends BaseQueue
 * @class Queue
 * @public
 */
export class Queue extends BaseQueue {
    /**
     * @description –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –∫–Ω–æ–ø–æ–∫
     * @public
     */
    public get components() {
        return QueueButtons.component(this.player);
    };

    /**
     * @description Embed –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
     * @public
     */
    public get componentEmbed() {
        try {
            const {api, artist, image, name, user} = this.tracks.track;
            return {
                color: api.color, thumbnail: image,
                author: {name: artist.title, url: artist.url, iconURL: artist.image.url},
                footer: {
                    text: `${user.username} ${this.tracks.total > 1 ? `| üéµ ${this.player.tracks.position + 1} - ${this.player.tracks.total} üé∂` : ""}`,
                    iconURL: user.avatar
                },
                fields: [
                    // –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
                    {
                        name: "",
                        value: `\`\`\`${name}\`\`\`` + this.player.progress
                    },

                    // –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–ª–∏ —Ç—Ä–µ–∫–∏
                    this.tracks.size > 0 ? (() => {
                        const tracks = (this.tracks.array(+3) as Track[]).map((track, index) => {
                            return `${index + 2} - ${track.name_replace}`;
                        });

                        return {
                            name: "",
                            value: tracks.join("\n")
                        };
                    })() : null
                ]
            };
        } catch (error) {
            Logger.log("ERROR", `[Queue/${this.message.guildID}]: ${error}`);
            return null;
        }
    };

    /**
     * @description –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã, –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–¥–µ—Å—å
     * @param message - –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
     * @public
     */
    public constructor(message: CommandInteraction) {
        super(message);
        const ID = message.guild.id;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –≤ —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π
        db.queues.set(ID, this);
    };
}

/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤-–∫–Ω–æ–ø–æ–∫
 * @class QueueButtons
 * @private
 */
class QueueButtons {
    /**
     * @author SNIPPIK
     * @description –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–µ—Ä–∞
     * @private
     */
    public static button = {
        resume: this.checkIDComponent("button.resume"),
        pause: this.checkIDComponent("button.pause"),
        loop: this.checkIDComponent("button.loop"),
        loop_one: this.checkIDComponent("button.loop_one")
    };

    /**
     * @author SNIPPIK
     * @description –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @private
     */
    public static components: any[] = [
        new ActionRowBuilder().addComponents([
            new StringSelectMenuBuilder().setCustomId("filter_select")
                .setPlaceholder("Select audio filter")
                .setOptions(filters.filter((filter) => !filter.args).map((filter) => {
                    return {
                        label: filter.name,
                        value: filter.name,
                        description: filter.locale["en-US"],
                    }
                }))
        ]),
        {
            type: 1,
            components: [
                // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
                this.createButton({env: "shuffle", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                this.createButton({env: "back", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                this.createButton({emoji: this.button.pause, id: "resume_pause"}),

                // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞/–≤–ø–µ—Ä–µ–¥
                this.createButton({env: "skip"}),

                // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
                this.createButton({emoji: this.button.loop, id: "repeat"})
            ]
        },
        {
            type: 1,
            components: [
                // –ö–Ω–æ–ø–∫–∞ –æ—á–µ—Ä–µ–¥–∏
                this.createButton({env: "queue", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
                this.createButton({env: "lyrics"}),

                // –ö–Ω–æ–ø–∫–∞ —Å—Ç–æ–ø
                this.createButton({env: "stop", style: 4}),

                // –ö–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                this.createButton({env: "filters", disabled: true}),

                // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
                this.createButton({env: "replay"})
            ]
        }
    ];

    /**
     * @author SNIPPIK
     * @description –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É id
     * @param name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ env
     * @private
     */
    private static checkIDComponent(name: string) {
        const id = env.get(name);
        const int = parseInt(id);

        if (isNaN(int)) return { name: `${id}` };
        return { id };
    };

    /**
     * @author SNIPPIK
     * @description –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
     * @param options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     * @private
     */
    public static createButton(options) {
        let button = {
            type: 2,
            style: options.style ?? 2,
            disabled: options.disabled,
            custom_id: null,
        };


        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω env
        if ("env" in options) return {...button,
            emoji: this.checkIDComponent(`button.${options.env}`),
            custom_id: options.env
        }

        return {...button,
            emoji: options.emoji,
            custom_id: options.id
        }
    };

    /**
     * @description –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
     * @param component
     * @param index
     * @param updates
     * @private
     */
    private static updateButton(component: typeof this.components[number]["components"], index: number, updates: any) {
        Object.assign(component[index], updates);
    };

    /**
     * @author SNIPPIK
     * @description –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –∫–Ω–æ–ø–æ–∫
     * @public
     */
    public static component = (player: AudioPlayer) => {
        const [firstRow, secondRow] = [this.components[1].components, this.components[2].components];

        const isMultipleTracks = player.tracks.total > 1;
        const isShuffled = player.tracks.shuffle;
        const isPaused = player.status === "player/pause";
        const currentRepeatType = player.tracks.repeat;
        const hasFilters = player.filters.enabled.length > 0;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.updateButton(firstRow, 0, { disabled: !isMultipleTracks, style: isShuffled ? 3 : 2 });
        this.updateButton(firstRow, 1, { disabled: !isMultipleTracks, style: isMultipleTracks ? 1 : 2 });
        this.updateButton(firstRow, 3, { disabled: !isMultipleTracks, style: isMultipleTracks ? 1 : 2 });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
        const loopEmoji = currentRepeatType === RepeatType.Song ? this.button.loop_one : (currentRepeatType === RepeatType.Songs ? this.button.loop : this.button.loop);
        this.updateButton(firstRow, 4, { emoji: loopEmoji, style: currentRepeatType === RepeatType.Songs ? 3 : 2 });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        this.updateButton(firstRow, 2, { emoji: isPaused ? this.button.resume : this.button.pause });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.updateButton(secondRow, 3, { disabled: !hasFilters });

        // –ö–Ω–æ–ø–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        this.updateButton(secondRow, 0, { disabled: !isMultipleTracks });

        return this.components;
    };
}